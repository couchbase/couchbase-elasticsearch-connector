/*
 * Copyright 2018 Couchbase, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.couchbase.connector.elasticsearch.cli;

import joptsimple.OptionException;
import joptsimple.OptionParser;
import joptsimple.OptionSet;
import joptsimple.OptionSpec;

import java.io.File;
import java.io.IOException;

import static com.couchbase.connector.VersionHelper.getVersionString;
import static com.couchbase.connector.util.EnvironmentHelper.getInstallDir;

public abstract class AbstractCliCommand {

  // Init Log4J. This must happen first before logger is declared.
  static {
    // Expect the launch script generated by Gradle to set this environment variable.
    final String appHome = System.getenv("APP_HOME");
    if (appHome == null) {
      // Use the default log4j2.xml file in the class path.
      System.err.println("WARNING: Environment variable 'APP_HOME' not set (launch script is responsible for this). " +
          "Using embedded logging config.");
    } else {
      System.setProperty("log4j.configurationFile", appHome + "/config/log4j2.xml");
    }
  }

  public static class CommonParser {
    protected final OptionParser parser = new OptionParser();

    public final OptionSpec<File> configFile = parser.accepts("config", "Optionally specify a config file other than the default. See the 'config' directory for examples.")
        .withRequiredArg().ofType(File.class).describedAs("path to config file")
        .defaultsTo(defaultConfigFile());

    public OptionSet parse(String... args) throws IOException {

      try {
        parser.accepts("version", "Display connector version information.");
        handleVersionAndHelp(parser, args);
        final OptionSet options = parser.parse(args);

        final File configFile = this.configFile.value(options);
        if (!configFile.exists()) {
          System.err.println("ERROR: Config file not found at " + configFile.getAbsoluteFile());
          System.err.println("       Please create this file, or use the --config option to specify a different file.");
          System.err.println("       Examples may be found in the 'config' directory.");
          System.exit(1);
        }

        return options;

      } catch (OptionException e) {
        System.err.println(e.getMessage());
        System.err.println();
        parser.printHelpOn(System.err);
        System.exit(1);
        throw new AssertionError("unreachable");
      }

    }

    void handleVersionAndHelp(OptionParser parser, String[] args) throws IOException {
      // parse version separately, since the "real" parser might have required arguments
      final OptionParser versionParser = new OptionParser();
      versionParser.allowsUnrecognizedOptions();
      versionParser.accepts("version");
      versionParser.accepts("help");
      if (versionParser.parse(args).has("version")) {
        System.out.println(getVersionString());
        System.exit(0);
      }

      if (versionParser.parse(args).has("help")) {
        parser.printHelpOn(System.out);
        System.exit(0);
      }
    }
  }

  static File defaultConfigFile() {
    return new File(getInstallDir(), "config/default-connector.toml");
  }
}
